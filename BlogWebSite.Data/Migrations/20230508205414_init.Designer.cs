// <auto-generated />
using System;
using BlogWebSite.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace YoutubeBlog.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230508205414_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c35e880e-17c4-4726-a20e-ff817fbb16ae"),
                            ConcurrencyStamp = "800bc536-6515-4886-b2d9-b811adbba554",
                            IsDeleted = false,
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("c6992ca2-86d3-40be-a85d-257fb72bbbeb"),
                            ConcurrencyStamp = "9294b10f-e4a2-4f0e-b54d-1d8dbf19ce3b",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8da9a416-cda8-4d0d-9087-6ea08174e2e2"),
                            ConcurrencyStamp = "09374461-7c70-498c-ae35-d373b29680a5",
                            IsDeleted = false,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20461ba2-1457-4303-aef9-15173ddbb9b5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e18ad048-2042-4a8e-9504-0a727f14bb38",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Firat",
                            ImageId = new Guid("242a5458-7d57-4dd6-abea-c5e99e626e87"),
                            IsDeleted = false,
                            LastName = "Ortac",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPsG+tWA3QSfZDOeLLsmwCLMn9zcfMKxvuSh8r9UNjfLSAVNHUnNcr/22pvidvcrew==",
                            PhoneNumber = "+905375655978",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "eb05c3c3-d84f-49d5-a184-6b47b40e6e54",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("84461ba2-1457-4303-aef9-15173ddbb9b5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f595b0d-0e2a-450d-bd72-62b9d04b1fb2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            ImageId = new Guid("242a5458-7d57-4dd6-abea-c5e99e626e87"),
                            IsDeleted = false,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6KZHBfExpStSyRYBullynua+wZSL33pTySwoIJYoxaIxeoo6PuyfTAuCyiYvJQyw==",
                            PhoneNumber = "+90537543546",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4d658389-c36e-4b61-9212-014ba120ae3c",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39ec69af-e6ff-472d-b8f6-b9088933e853",
                            Email = "adminDeneme@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            ImageId = new Guid("242a5458-7d57-4dd6-abea-c5e99e626e87"),
                            IsDeleted = false,
                            LastName = "Ulu",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINDENEME@GMAIL.COM",
                            NormalizedUserName = "ADMINDENEME@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPqGU5UGVy4dEZuJvjnHsJoP/NRepDXot+ccxnpxiShz+41x461khMnGq2C++SPgGg==",
                            PhoneNumber = "+905375534555",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fce40b53-7c71-40e1-8de3-23ad01035f99",
                            TwoFactorEnabled = false,
                            UserName = "adminDeneme@gmail.com"
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("20461ba2-1457-4303-aef9-15173ddbb9b5"),
                            RoleId = new Guid("c35e880e-17c4-4726-a20e-ff817fbb16ae")
                        },
                        new
                        {
                            UserId = new Guid("84461ba2-1457-4303-aef9-15173ddbb9b5"),
                            RoleId = new Guid("c6992ca2-86d3-40be-a85d-257fb72bbbeb")
                        },
                        new
                        {
                            UserId = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            RoleId = new Guid("c6992ca2-86d3-40be-a85d-257fb72bbbeb")
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db5a9535-7d8f-4176-96e9-c30592811cf8"),
                            CategoryId = new Guid("66349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Visual studio, Blog orem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Visual Studio'ya Giriş",
                            UserId = new Guid("20461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("081f033b-13da-4ae4-8540-fd5a869052cd"),
                            CategoryId = new Guid("58349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Javascript Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Javascript Nedir?",
                            UserId = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2616566b-84c7-4f29-8b25-b16395e4ddcc"),
                            CategoryId = new Guid("98349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "C# Hakkinda Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "C# Hakkinda",
                            UserId = new Guid("20461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8e9815be-a6bf-45ea-b424-5e6484b50367"),
                            CategoryId = new Guid("98349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = ".Net Developer Olmak Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = ".Net Developer Olmak",
                            UserId = new Guid("84461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d12e3d5a-4605-4b15-a701-825b81cd32a1"),
                            CategoryId = new Guid("98349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Identity Framework Kullanımı Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Identity Framework Kullanımı",
                            UserId = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e0a5e1d6-53da-4d43-b96f-63bb5f787475"),
                            CategoryId = new Guid("53349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Python Fonksiyon Yazımı Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Python Fonksiyon Yazımı",
                            UserId = new Guid("84461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bd0e0b24-18cf-48f5-a7b3-16b0d758c9f6"),
                            CategoryId = new Guid("58349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Web Geliştiricilerin Bilmesi Gerekenler Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Web Geliştiricilerin Bilmesi Gerekenler",
                            UserId = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2d06b3f6-3f91-4480-aea8-400a8aecb772"),
                            CategoryId = new Guid("21349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = ".Net'de Api Kullanımı Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = ".Net'de Api Kullanımı",
                            UserId = new Guid("99461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6a9f89ff-7573-435a-a5b8-681b1304e28c"),
                            CategoryId = new Guid("13349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            Content = "Veritabanında Procedure Kullanımı Web Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı",
                            CreatedBy = "Admin test",
                            CreatedDate = new DateTime(2023, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageId = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            Title = "Veritabanında Procedure Kullanımı",
                            UserId = new Guid("20461ba2-1457-4303-aef9-15173ddbb9b5"),
                            ViewCount = 0,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.ArticleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2265),
                            Name = "Asp.net Core",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("66349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2269),
                            Name = "Visual Studio",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("53349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2278),
                            Name = "Python",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("21349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2283),
                            Name = "C#",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("13349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2287),
                            Name = "SQL",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("58349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Firat Ortac",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2291),
                            Name = "Javascript",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2544),
                            FileName = "~/images/testimage",
                            FileType = "jpg",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("77349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "SuperAdmin",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2551),
                            FileName = "~/images/testimage",
                            FileType = "jpg",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("44349229-d8aa-4430-8f3a-2bec4b6816ae"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2555),
                            FileName = "~/images/testimage",
                            FileType = "jpg",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("242a5458-7d57-4dd6-abea-c5e99e626e87"),
                            CreatedBy = "SuperAdmin",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2560),
                            FileName = "~/images/user-images/FiratOrtac_2439664.png",
                            FileType = "image/png",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("342a5458-7d57-4dd6-abea-c5e99e626e87"),
                            CreatedBy = "SuperAdmin",
                            CreatedDate = new DateTime(2023, 5, 8, 23, 54, 13, 811, DateTimeKind.Local).AddTicks(2568),
                            FileName = "~/images/article-images/emptyImage.jpg",
                            FileType = "image/jpg",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppRoleClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserClaim", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserLogin", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserRole", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUserToken", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Article", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.Image", "Image")
                        .WithMany("Articles")
                        .HasForeignKey("ImageId");

                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.ArticleComment", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.Comment", "Comment")
                        .WithMany("ArticleComments")
                        .HasForeignKey("CommentId");

                    b.Navigation("Article");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("YoutubeBlog.Entity.Entities.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Article", b =>
                {
                    b.Navigation("ArticleComments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Comment", b =>
                {
                    b.Navigation("ArticleComments");
                });

            modelBuilder.Entity("YoutubeBlog.Entity.Entities.Concrete.Image", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
